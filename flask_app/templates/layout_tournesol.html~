<!DOCTYPE html>
<meta charset="utf-8">
<style>
.nav a {
    text-decoration:None;
}
.nav a:hover {
    color: blue;
}
.link {
  fill: #001;
  stroke: none;
}
.link.intra {
    fill: #000;
}
.link.query {
    fill: #000;
}
.link.inter{
  fill:#110;  
}
.link.over{
    fill:#F01;
}
.link.noOver {
  stroke-opacity: .15;  
}

.label  {
    fill: #000;
    font-family: sans-serif;
}
.label.over {
    fill: #F00;
}
.label.over .node {
    stroke: #F00;
}
.label.over.mouse {
    font-weight: 900;
}

.node {
   stroke: #000;
   stroke-width: 1.8px;  
   fill: none;
}
.node.query {
  stroke: #100;
  stroke-width: 1.8px;
  fill: #FFF;
}
.label.over .query {
  stroke: #F00;
}
.label.overLink .query {
 stroke: #34E;
}
.label.overLink {
    fill: #34E;
}
.label.overLink .node {
    stroke: #34E;
}
.link.overLink {
    fill: #34E;
}

.puceLinkOff {
    fill: #BBB;
    fill-opacity:.3;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/d3.hive.v0.min.js"></script>
<script>


var width = window.innerWidth,
    height = 600,
    radius = 380;

var xCenter = width/2,
    yCenter = height-30; 

var puceRadius = 3;


var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height)
        .append("g");
        //.attr("transform", "translate( "+leftMargin+", 20 )" ); // only margin

/* ---- start JSON ---- */  //d3.json("/data/{{query}}", function(error, myData) {
d3.json("/data/{{query}}", function(error, myData) {
    var nodes = myData['nodes'],
        links = myData['links'],
        iDelta = myData['iDelta'],
        nNodes = myData['nNodes'],
        query = myData['query'], 
        clusters_id = myData['clusters_id'];

    //console.log( iDelta )
    //console.log( nodes[1]['id'] )
    //nNodes = nodes.length;
   

    var deltaTheta = Math.PI/(nNodes-1);  // en radian

/* -- Labels -- */
  nodeA =  svg.selectAll("a")
        .data(nodes).enter()
    .append("a")
      .attr("xlink:href", function(d){ return '/tournesol/'+d['label']+'/' ; } )
      .attr("class", "label")
      .attr("id", function(d) { return "node-" + d['id']; })
      .on("mouseover", mouseOverLabel)
      .on("mouseout", mouseOutLabel)

     var degName = 'gdeg'; // 'deg_loc';  // Choose deg Local or degre Graph 
     var degMax = d3.max( nodes, function(d) { return d[ degName ];} );
        // console.log( degMax )
     var fontSizeScale = d3.scale.pow().exponent(.5)
                              .domain([1, degMax])  // .domain([minDataPoint,maxDataPoint])
                                .range([13,24]);

    nodeA.append("text")
       .text( function(d){ return d['label'] ; })
        .attr("y", 1 ) 
        .attr("x", 0) 
        .attr("style", function(d){
            var s = '';    
            if( Math.cos( deltaTheta*iDelta[ d['id'] ]  )>0 ){
                 s += "text-anchor:end; ";
               } else {   s+= "text-anchor:start; ";  }        
            
                s+= "font-size: "+ fontSizeScale(d[ degName ]) +"px ;";
                s+= "dominant-baseline: middle;"
            return s; } )
        .attr("transform", function(d){return translateLabel(d);});



    nodeA.append("path")
        .attr("class", function(d){ if( d['id'] == query['id'] ){ return 'node query' }
                                else{ return 'node' }
            })
       // .attr("cx", function(d) { return xPosition( radius , iDelta[ d['id'] ]   ); })
       // .attr("cy", function(d) { return yPosition( radius , iDelta[ d['id'] ]   ); })
        .attr("d", function(d){ return triangle(d) ;} )
        .attr("transform", function(d){return translateTriangle(d);});

    function triangle(d){
        var Tsize = 11;

        var path = "m 0,"+Tsize/2+" L"+Tsize/2+",0 "+" 0,"+(-Tsize/2) ;
        return path;
    }


    function xPosition( rayon , i ){
        return xCenter - rayon*Math.cos( deltaTheta*i  );
    }
    function yPosition( rayon , i ){
        return yCenter - rayon*Math.sin(  deltaTheta*i  );
    }

/* -- mouse Over Label -- */
function mouseOverLabel(d){
    //console.log(  d['label'] )
    svg.select("#node-" + d['id']).classed('over mouse', true );// le noeud sous la souris

   /*svg.selectAll("path.link")
        .classed("noOver", true);*/

    svg.selectAll("circle.link.target-" + d['id'])
        .classed("over", true)
        .classed("noOver", false)
        .each( function(d){ 
                this.parentNode.appendChild(this);   // go on top layer
                svg.select("#node-" + d['s']).classed('over', true );
              } );

      svg.selectAll("circle.link.source-"  + d['id'])
          .classed("over", true) 
        .classed("noOver", false) 
          .each( function(d){ 
                    this.parentNode.appendChild(this);   // go on top layer
                    svg.select("#node-" + d['t']).classed('over', true );
                 } );
}

function mouseOutLabel(d){
     svg.select("#node-" + d['id']).classed('over mouse', false ); // le noeud sous la souris
  
  /*  svg.selectAll("circle.link")
        .classed("noOver", false); */

    svg.selectAll("circle.link.target-" + d['id'])
          .classed("over", false)
        .classed("noOver", false) 
            .each( function(d){ 
                svg.select("#node-" + d['s']).classed('over', false );
                             } );

      svg.selectAll("circle.link.source-" + d['id'])
          .classed("over", false)
          .classed("noOver", false)      
          .each( function(d){ 
                svg.select("#node-" + d['t']).classed('over', false );
                } );
}


// ------
function translateLabel(d){

    var outerRad = radius + 10;

    var dx = xPosition( outerRad , iDelta[ d['id'] ]   );
    var dy = yPosition( outerRad , iDelta[ d['id'] ]   );

    if( Math.cos( deltaTheta*iDelta[ d['id'] ]  )>0 ) { var sens = 0; }
    else { var sens = -180;  }

    var angle = .75*(sens+deltaTheta*iDelta[ d['id'] ]*180/Math.PI) //<- coefficient 'brosse'

    return "translate("+dx+", "+dy+") rotate("+ angle +") "
}

function translateTriangle(d){

    var outerRad = radius + 4;

    var dx = xPosition( outerRad , iDelta[ d['id'] ]   );
    var dy = yPosition( outerRad , iDelta[ d['id'] ]   );

    var angle = deltaTheta*iDelta[ d['id'] ]*180/Math.PI;

    return "translate("+dx+", "+dy+") rotate("+ angle +") "
}

/* -- Liens -- */

var puceLinkRadius = 3.5;

// tt les points ?
var allLinks = [];
for(ni in nodes){
    for(nj in nodes){
        //console.log( ni, nj )
        var link = {};
        link['s'] = ni; link['t'] = nj;
        allLinks.push( link  );   
    }
}

svg.selectAll(".link")
    .data(allLinks)
  .enter().append("circle")
        .attr("class", "puceLinkOff" )
        .attr("cx", function(d) { return xPosition( getRadius( d ) , getAngle( d )  ) })
        .attr("cy", function(d) { return yPosition( getRadius( d ) , getAngle( d )  ) })
        .attr("r", 2) ; 

svg.selectAll(".link")
    .data(links)
  .enter().append("circle")
        .attr("class", function(d){ var c = 'link ';
                if( d["type"]==="query" ){ c += "query"; }
                else if (d["type"]==="inter")  { c += "inter"; }
                else    { c += "intra"; }
                c += ' source-'+d['s'] + ' target-'+d['t'];  // pour le rollover sur les labels

                var c_ids = [clusters_id[d['s']], clusters_id[d['t']] ].sort();
                c += ' c-'+ c_ids[0] + c_ids[1] ;  // pour le rollover sur les liens
                return c;   }  )
        .attr("cx", function(d) { return xPosition( getRadius( d ) , getAngle( d )  ) })
        .attr("cy", function(d) { return yPosition( getRadius( d ) , getAngle( d )  ) })
        .attr("r", puceLinkRadius) 
        .on("mouseover", mouseOverLink)
        .on("mouseout", mouseOutLink);

function getAngle( d ){
    return (iDelta[ d['t'] ]+iDelta[ d['s'] ])/2;
}
function getRadius( d ){
    return  radius*( (1 - .75*deltaTheta/Math.PI*Math.abs( iDelta[ d['t'] ]-iDelta[ d['s'] ] ) ));
}



/* append("path")
    .attr("class", function(d){ var c = 'link ';
            if( d["type"]==="query" ){ c += "query"; }
            else if (d["type"]==="inter")  { c += "inter"; }
            else    { c += "intra"; }
            c += ' source-'+d['s'] + ' target-'+d['t'];  // pour le rollover sur les labels

            var c_ids = [clusters_id[d['s']], clusters_id[d['t']] ].sort();
            c += ' c-'+ c_ids[0] + c_ids[1] ;  // pour le rollover sur les liens
            return c;   }  )
    .attr("d", function(d){ return linkArc(d) ;} ); 
*/

/* -- Roll over pour les liens  -- */
    svg.selectAll("path.link").on("mouseover", mouseOverLink)
                                  .on("mouseout", mouseOutLink); 
function mouseOverLink(d){
      svg.select("#node-" + d['s']).classed('overLink', true );
      svg.select("#node-" + d['t']).classed('overLink', true );

        var c_ids = [clusters_id[d['s']], clusters_id[d['t']] ].sort();
        var c_class = 'c-'+ c_ids[0] + c_ids[1] ; 


    svg.selectAll("circle.link." + c_class )
        .classed("overLink", true)
        .each( function(d){ 
                this.parentNode.appendChild(this);   // go on top layer
                svg.select("#node-" + d['s']).classed('overLink', true );
                svg.select("#node-" + d['t']).classed('overLink', true );
              } );


}
function mouseOutLink(d){

        var c_ids = [clusters_id[d['s']], clusters_id[d['t']] ].sort();
        var c_class = 'c-'+ c_ids[0] + c_ids[1] ; 

        svg.select("#node-" + d['s']).classed('overLink', false );
        svg.select("#node-" + d['t']).classed('overLink', false );


        svg.selectAll("circle.link." + c_class )
          .classed("overLink", false)
           .each( function(d){ 
                    svg.select("#node-" + d['s']).classed('overLink', false );
                    svg.select("#node-" + d['t']).classed('overLink', false );
                  } );
}

function linkArc(d){
    // liens en arc de cercle 
    var R = radius - puceRadius;

    var startX = xPosition( R , iDelta[ d['s'] ]   );
        startY = yPosition( R , iDelta[ d['s'] ]   );

    var endX = xPosition( R , iDelta[ d['t'] ]   );
        endY = yPosition( R , iDelta[ d['t'] ]   );

    // ** !!! rayon infini  ***
    var phi = Math.abs( deltaTheta*( iDelta[d['s']] - iDelta[d['t']] ));

    if( phi > Math.PI*0.99 ) { 
        path = "m "+startX+","+startY+" L "+endX+","+endY ;
        return path
    }   

    var r = Math.tan( phi/2 )*R;
    
    // gestion de l'orientation de l'arc (flag) :
    if ( (iDelta[d['s']] - iDelta[d['t']] ) < 0 ){ var flag = 0;   }
    else { var flag = 1; }

    var path = "m "+startX+","+startY+" A"+r+","+r+" 0 0,"+flag+" "+endX+","+endY ;

    return path;
}

/*
function linkCurve(d){
     // liens en coube de bezier 

    var arc = radius*Math.abs( deltaTheta*(iDelta[d['s']]-iDelta[d['t']] ));
    var innerRad = Math.max( 0.65*radius, radius-0.85*arc ); //*arc;

    var startX = xCenter+radius*Math.cos( deltaTheta*iDelta[d['s']]  ),
        startY = yCenter+radius*Math.sin( deltaTheta*iDelta[d['s']]  );

    var startXmiddle = xCenter+innerRad*Math.cos( deltaTheta*iDelta[d['s']]  ),
        startYmiddle = yCenter+innerRad*Math.sin( deltaTheta*iDelta[d['s']]  );

    var endXmiddle = xCenter+innerRad*Math.cos( deltaTheta*iDelta[d['t']]  ),
        endYmiddle = yCenter+innerRad*Math.sin( deltaTheta*iDelta[d['t']]  );

    var endX = xCenter+radius*Math.cos( deltaTheta*iDelta[d['t']]  ),
        endY = yCenter+radius*Math.sin( deltaTheta*iDelta[d['t']]  );

    var path = "m "+startX+","+startY+" C"+startXmiddle+","+startYmiddle+" "+endXmiddle+","+endYmiddle+" "+endX+","+endY ;

    return path;
}*/
// Ajout des puces  (a la fin pour etre dessus les liens)
/*    svg.selectAll(".node")
        .data(nodes)
      .enter().append("circle")
        .attr("class", "node")
        .attr("cx", function(d) { return xCenter+radius*Math.cos( deltaTheta*iDelta[ d['id'] ]   ); })
        .attr("cy", function(d) { return yCenter+radius*Math.sin( deltaTheta*iDelta[ d['id'] ]   ); })
        .attr("r", 3) ; //radius */
      //  .style("fill", "#001" ); //function(d) { return color(d.id); });

});  // <-- fin lecture Json

</script>

<p class='nav'>Layout <a href="/{{query}}/">circular</a>, <a href="/square/{{query}}/">square</a>
</p>

</body>
